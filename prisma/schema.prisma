// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String    @id @default(cuid())
  customerId      String?
  role            String?   @default("user")
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  isEmailVerified Boolean   @default(false)
  image           String?
  password        String?
  companyName     String?
  salary          Int?      @default(0)
  paidLeaves      Int?      @default(0)
  unpaidLeaves    Int?      @default(0)
  isActive        Boolean?  @default(false)
  lastActive      DateTime? @default(now())

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model OTP {
  id        String   @id @default(cuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("otp_tokens")
}

model Holiday {
  id          String   @id @default(uuid())
  name        String
  description String
  countryId   String
  country     String
  date        DateTime
  year        Int
  month       Int
  day         Int
  url         String
  createdAt   DateTime @default(now())
}
